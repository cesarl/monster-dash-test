// Generated by CoffeeScript 1.3.3
(function() {
  var App, Canvas, Collection, Event, Id, Img, Node, Reader, Square, Texture, Tile, Update,
    __slice = [].slice;

  App = (function() {

    function App() {
      this.canvas = new Canvas(this);
      this.images = {};
      this.cycleRunning = false;
    }

    App.prototype.loadImages = function() {
      var array, i, _results;
      array = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      i = 0;
      _results = [];
      while (array[i]) {
        _results.push(this.images[array[i].name] = new Img(this, array[i++].src));
      }
      return _results;
    };

    App.prototype.startCycle = function() {
      var anim,
        _this = this;
      this.cycleRunning = true;
      if (this.anim === true) {
        return true;
      }
      this.anim = true;
      anim = function() {
        if (_this.cycleRunning) {
          requestAnimFrame(anim);
        }
        return _this.cycle();
      };
      return anim();
    };

    App.prototype.stopCycle = function() {
      return this.cycleRunning = false;
    };

    App.prototype.cycle = function() {
      return $.publish('raf:frame:tick');
    };

    return App;

  })();

  Event = (function() {

    function Event(domElem, en) {
      var _this = this;
      this.domElem = domElem != null ? domElem : window;
      this.en = en != null ? en : false;
      this.up = this.down = this.left = this.right = this.space = this.esc = this.other = false;
      this.domElem.addEventListener("keydown", function(e) {
        if (e.keyCode !== 116) {
          e.preventDefault();
        }
        switch (e.keyCode) {
          case 38 || 90:
            _this.up = true;
            return $.publish("up");
          case 40 || 83:
            _this.down = true;
            return $.publish("down");
          case 37 || 81:
            _this.left = true;
            return $.publish("left");
          case 39 || 68:
            _this.right = true;
            return $.publish("right");
          case 32:
            _this.space = true;
            return $.publish("space");
          case 27:
            _this.esc = true;
            return $.publish("esc");
          default:
            _this.other = true;
            return $.publish("other");
        }
      });
      this.domElem.addEventListener("keyup", function(e) {
        if (e.keyCode !== 116) {
          e.preventDefault();
        }
        switch (e.keyCode) {
          case 38 || 90:
            return _this.up = false;
          case 40 || 83:
            return _this.down = false;
          case 37 || 81:
            return _this.left = false;
          case 39 || 68:
            return _this.right = false;
          case 32:
            return _this.space = false;
          case 27:
            return _this.esc = false;
        }
      });
      this;

    }

    Event.prototype.is = function(touch) {
      if (this[touch]) {
        return this[touch];
      } else {
        return false;
      }
    };

    return Event;

  })();

  Canvas = (function() {

    function Canvas(app, canvasId, w, h) {
      var _ref,
        _this = this;
      this.app = app;
      this.canvasId = canvasId != null ? canvasId : "canvas";
      this.w = w != null ? w : 800;
      this.h = h != null ? h : 600;
      this.subHandler = $.subscribe('raf:frame:tick', function() {
        return _this.clear();
      });
      this.canvas = document.getElementById(this.canvasId);
      this.ctx = (_ref = this.canvas) != null ? _ref.getContext("2d") : void 0;
      this.fillStyle = "#000";
      this.strokeStyle = "#000";
      this.text_cache_canvas = document.createElement("canvas");
      this.text_cache_canvas.width = this.w;
      this.text_cache_canvas.height = this.h;
      this.text_cache = this.text_cache_canvas.getContext("2d");
      this.text_cache.textAlign = "center";
      this.setSize();
    }

    Canvas.prototype.splitText = function(text) {
      var res;
      res = text.split("\n");
      return res;
    };

    Canvas.prototype.setSize = function(w, h) {
      this.w = w != null ? w : this.w;
      this.h = h != null ? h : this.h;
      this.canvas.width = this.w;
      return this.canvas.height = this.h;
    };

    Canvas.prototype.clear = function(x, y, w, h) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (w == null) {
        w = this.w;
      }
      if (h == null) {
        h = this.h;
      }
      if (this.clrAll) {
        return this.ctx.clearRect(x, y, w, h);
      }
    };

    Canvas.prototype.setFillStyle = function(fillStyle) {
      this.fillStyle = fillStyle != null ? fillStyle : this.fillStyle;
      return this.ctx.fillStyle = this.fillStyle;
    };

    Canvas.prototype.setStrokeStyle = function(strokeStyle) {
      this.strokeStyle = strokeStyle != null ? strokeStyle : this.strokeStyle;
      return this.ctx.strokeStyle = this.strokeStyle;
    };

    Canvas.prototype.setOpacity = function(globalAlpha) {
      this.globalAlpha = globalAlpha != null ? globalAlpha : 1;
      return this.ctx.globalAlpha = this.globalAlpha;
    };

    Canvas.prototype.printImg = function(_img, x, y, w, h, imgX, imgY, imgW, imgH) {
      var _ref, _ref1, _ref2, _ref3;
      this._img = _img != null ? _img : null;
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (w == null) {
        w = (_ref = this._img) != null ? _ref.width : void 0;
      }
      if (h == null) {
        h = (_ref1 = this._img) != null ? _ref1.height : void 0;
      }
      if (imgX == null) {
        imgX = 0;
      }
      if (imgY == null) {
        imgY = 0;
      }
      if (imgW == null) {
        imgW = (_ref2 = this._img) != null ? _ref2.width : void 0;
      }
      if (imgH == null) {
        imgH = (_ref3 = this._img) != null ? _ref3.height : void 0;
      }
      if (!this._img) {
        return false;
      }
      return this.ctx.drawImage(this._img, imgX, imgY, imgW, imgH, x, y, w, h);
    };

    Canvas.prototype.destroy = function() {
      return this.canvas.parentNode.removeChild(this.canvas);
    };

    Canvas.prototype.clearEachFrame = function() {
      return this.clrAll = true;
    };

    Canvas.prototype.stopClearEachFrame = function() {
      return this.clrAll = false;
    };

    Canvas.prototype.printText = function(data, refresh) {
      var height, ind, text, tmp, val, width, _i, _j, _len, _len1;
      if (refresh == null) {
        refresh = false;
      }
      if (refresh) {
        text = this.splitText(data.txt);
        this.text_cache.clearRect(0, 0, this.w, this.h);
        width = 0;
        for (_i = 0, _len = text.length; _i < _len; _i++) {
          val = text[_i];
          tmp = this.text_cache.measureText(val);
          if (tmp.width > width) {
            width = tmp.width;
          }
        }
        height = data.fontSize * (text.length - 1);
        this.text_cache.globalAlpha = 0.5;
        this.text_cache.font = data.fontSize + "px " + data.fontFamily;
        this.text_cache.fillStyle = data.bgColor;
        this.text_cache.fillRect(data.x - width / 2 - data.fontSize, data.y, width + data.fontSize * 2, height + data.fontSize * 2);
        this.text_cache.globalAlpha = 1;
        this.text_cache.fillStyle = data.txtColor;
        for (ind = _j = 0, _len1 = text.length; _j < _len1; ind = ++_j) {
          val = text[ind];
          this.text_cache.fillText(val, data.x, data.y + (ind + 1) * data.fontSize);
        }
      }
      return this.ctx.drawImage(this.text_cache_canvas, 0, 0);
    };

    return Canvas;

  })();

  Img = (function() {

    function Img() {
      var app, args, callback, img, src,
        _this = this;
      app = arguments[0], src = arguments[1], callback = arguments[2], args = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
      this.app = app;
      this.src = src;
      img = new Image();
      if (src) {
        img.src = src;
      } else {
        img.src = "missing.png";
      }
      img.addEventListener("load", function(e) {
        return typeof callback === "function" ? callback() : void 0;
      });
      return img;
    }

    return Img;

  })();

  Update = (function() {

    function Update(tickRate, expiration, callback, callbackEnd) {
      this.tickRate = tickRate != null ? tickRate : 60;
      this.expiration = expiration != null ? expiration : -1;
      this.callback = callback;
      this.callbackEnd = callbackEnd;
      this.elapsed = 0;
      this.turn = 0;
      this.active = false;
      this.ended = false;
      this.start();
      this;

    }

    Update.prototype.start = function() {
      var _this = this;
      this.active = true;
      return this.subHandler = $.subscribe('raf:frame:tick', function() {
        return _this.step();
      });
    };

    Update.prototype.step = function() {
      this.elapsed++;
      this.totalElapsed += this.elapsed;
      if (this.elapsed >= this.tickRate) {
        this.elapsed = 0;
        this.turn++;
        if (typeof this.callback === "function") {
          this.callback();
        }
      }
      if (this.turn >= this.expiration && this.expiration > 0) {
        if (typeof this.callbackEnd === "function") {
          this.callbackEnd();
        }
        this.ended = true;
        return this.stop();
      }
    };

    Update.prototype.stop = function() {
      if (this.subHandler) {
        $.unsubscribe(this.subHandler);
      }
      return this.active = false;
    };

    return Update;

  })();

  Id = (function() {

    function Id() {
      var newDate, partOne, partThree, partTwo;
      newDate = new Date;
      partOne = newDate.getTime();
      partTwo = 1 + Math.floor(Math.random() * 32767);
      partThree = 1 + Math.floor(Math.random() * 32767);
      this.id = partOne + '-' + partTwo + '-' + partThree;
    }

    Id.prototype.get = function() {
      return this.id;
    };

    return Id;

  })();

  Tile = (function() {

    function Tile(_plain, img) {
      this._plain = _plain;
      this.img = img;
      this.animationName = false;
      this.update(this._plain, this.img);
    }

    Tile.prototype.update = function(_plain, img) {
      var key, val, x, y, _ref;
      this._plain = _plain;
      this.img = img;
      _ref = this._plain;
      for (key in _ref) {
        val = _ref[key];
        this[key] = val;
      }
      this.coords = [];
      y = 0;
      while (y < this.y) {
        x = 0;
        while (x < this.x) {
          val = {
            x: x * this.w + this.startX,
            y: y * this.h + this.startY,
            w: this.w,
            h: this.h
          };
          this.coords.push(val);
          x++;
        }
        y++;
      }
      return this.frameIndex = 0;
    };

    Tile.prototype.animate = function(from, to, circular, frameRate, expiration, callback) {
      var _this = this;
      this.from = from;
      this.to = to;
      this.circular = circular;
      this.frameRate = frameRate;
      this.expiration = expiration;
      if (this.from < 0 || this.to > this.x * this.y - 1) {
        return false;
      }
      if (this.anim) {
        this.stopAnimate();
      }
      this.frameIndex = this.from;
      this.direction = 1;
      return this.anim = new Update(this.frameRate, this.expiration * (this.to - this.from), (function() {
        return _this.updateAnimation();
      }), (function() {
        return typeof callback === "function" ? callback() : void 0;
      }));
    };

    Tile.prototype.stopAnimate = function() {
      var _ref;
      return (_ref = this.anim) != null ? _ref.stop() : void 0;
    };

    Tile.prototype.updateAnimation = function() {
      this.frameIndex += this.direction;
      if (this.circular) {
        if (this.frameIndex > this.to) {
          this.frameIndex = this.to - 1;
          this.direction = -1;
        } else if (this.frameIndex < this.from) {
          this.frameIndex = this.from + 1;
          this.direction = 1;
        }
      } else if (this.frameIndex > this.to) {
        this.frameIndex = this.from;
      }
      return this;
    };

    return Tile;

  })();

  Texture = (function() {

    function Texture(_plain, img) {
      this._plain = _plain;
      this.img = img;
      this.animationName = false;
      this.update(this._plain, this.img);
    }

    Texture.prototype.update = function(_plain, img) {
      var key, val, x, y, _ref;
      this._plain = _plain;
      this.img = img;
      this.x = 0;
      this.y = 0;
      _ref = this._plain;
      for (key in _ref) {
        val = _ref[key];
        this[key] = val;
      }
      this.coords = [];
      this.calc();
      y = 0;
      while (y < this.y) {
        x = 0;
        while (x < this.x) {
          val = {
            x: x * this.w + this.startX,
            y: y * this.h + this.startY,
            w: this.w,
            h: this.h
          };
          this.coords.push(val);
          x++;
        }
        y++;
      }
      return this.frameIndex = 0;
    };

    Texture.prototype.buildPart = function(x, y) {
      var part;
      part = {
        x: x,
        y: y,
        xx: this.imgW + (x - this.w),
        yy: this.imgH + y,
        img: this.img
      };
      return this.col.push(part);
    };

    Texture.prototype.calc = function() {
      var x, y, _results;
      this.col = [];
      y = 0;
      _results = [];
      while (y * this.imgH - this.y < this.h) {
        x = 0;
        while (x * this.imgW - this.x < this.w) {
          this.buildPart(x * this.imgW - this.x, y * this.imgH - this.y);
          x++;
        }
        _results.push(y++);
      }
      return _results;
    };

    Texture.prototype.animate = function(vx, vy, speed, expiration, canvas, callback) {
      var _this = this;
      this.vx = vx;
      this.vy = vy;
      this.speed = speed;
      this.expiration = expiration;
      this.canvas = canvas;
      if (this.anim) {
        this.anim.stop();
      }
      return this.anim = new Update(this.speed, -1, (function() {
        return _this.updateAnimation();
      }), (function() {
        return typeof callback === "function" ? callback() : void 0;
      }));
    };

    Texture.prototype.stopAnimate = function() {
      var _ref;
      return (_ref = this.anim) != null ? _ref.stop() : void 0;
    };

    Texture.prototype.updateAnimation = function() {
      this.x += this.vx;
      this.y += this.vy;
      if (Math.abs(this.x) >= this.imgW) {
        this.x = -(this.imgW - Math.abs(this.x));
      }
      if (Math.abs(this.y) >= this.imgH) {
        this.y = -(this.imgH - Math.abs(this.y));
      }
      return this.calc();
    };

    return Texture;

  })();

  Square = (function() {

    function Square(w, h, x, y) {
      this.w = w;
      this.h = h;
      this.x = x;
      this.y = y;
      this.resize(this.w, this.h);
      this;

    }

    Square.prototype.resize = function(w, h) {
      this.w = w;
      this.h = h;
      this.xx = this.x + this.w;
      this.yy = this.y + this.h;
      this.hw = this.w / 2;
      return this.hh = this.h / 2;
    };

    Square.prototype.moveTo = function(x, y) {
      this.x = x;
      this.y = y;
      this.xx = this.x + this.w;
      this.yy = this.y + this.h;
      return this;
    };

    Square.prototype.move = function(x, y) {
      this.x += x;
      this.y += y;
      this.xx += x;
      this.yy += y;
      return this;
    };

    Square.prototype.moveToX = function(x) {
      this.x = x;
      this.xx = this.x + this.w;
      return this;
    };

    Square.prototype.moveToY = function(y) {
      this.y = y;
      this.yy = this.y + this.h;
      return this;
    };

    Square.prototype.moveCenter = function(x, y) {
      this.x = x - this.hw;
      this.y = y - this.hh;
      this.xx = x + this.hw;
      return this.yy = y + this.hh;
    };

    Square.prototype.vecSimplify = function(x, y, speed) {
      return {
        x: Math.floor(x / speed),
        y: Math.floor(y / speed)
      };
    };

    Square.prototype.slideTo = function(x, y, speed, callback) {
      var backToStart,
        _this = this;
      if (callback == null) {
        callback = false;
      }
      if (this.slideAnimation) {
        this.slideAnimation.stop();
      }
      this.vec = this.vecSimplify(x - this.x, y - this.y, speed);
      backToStart = function() {
        _this.moveTo(x, y);
        return typeof callback === "function" ? callback() : void 0;
      };
      return this.slideAnimation = new Update(1, speed, (function() {
        return _this.updateAnimation();
      }), (function() {
        return backToStart();
      }));
    };

    Square.prototype.jumpY = function(force, gravity, callback, originalY) {
      var _this = this;
      if (originalY == null) {
        originalY = this.y;
      }
      this.jumpingY = true;
      this.slideTo(this.x, this.y + force, 2, function() {
        force += gravity;
        if (_this.y > originalY) {
          _this.y = originalY;
          _this.jumpingY = false;
          if (callback) {
            return callback();
          }
        } else {
          return _this.jumpY(force, gravity, callback, originalY);
        }
      });
      return this;
    };

    Square.prototype.updateAnimation = function() {
      this.x += this.vec.x;
      this.y += this.vec.y;
      this.xx += this.vec.x;
      return this.yy += this.vec.y;
    };

    Square.prototype.shake = function(intensity, length, x, y, bin, callback) {
      var dirx, diry,
        _this = this;
      if (x == null) {
        x = this.x;
      }
      if (y == null) {
        y = this.y;
      }
      if (bin == null) {
        bin = 0;
      }
      dirx = bin === 1 ? x : this.x + (intensity * -1) + (Math.random() * intensity);
      diry = bin === 1 ? y : this.y + (intensity * -1) + (Math.random() * intensity);
      if (length === 0) {
        this.slideTo(x, y, 2);
        if (callback) {
          (function() {
            return callback();
          });
        }
      } else {
        this.slideTo(dirx, diry, 2);
      }
      if (length > 0) {
        bin = bin === 0 ? 1 : 0;
        return setTimeout((function() {
          return _this.shake(intensity, length - 1, x, y, bin, callback);
        }), 100);
      }
    };

    Square.prototype.sqCollision = function(sq) {
      if (!(this.x > sq.xx || this.xx < sq.x || this.y > sq.yy || this.yy < sq.y)) {
        return true;
      }
      return false;
    };

    Square.prototype.stopAnimate = function() {
      var _ref;
      return (_ref = this.slideAnimation) != null ? _ref.stop() : void 0;
    };

    Square.prototype.startFreeMove = function(e, up, right, down, left, U, R, D, L, max, callback) {
      var freeMove, i, vx, vy,
        _this = this;
      if (max == null) {
        max = 10;
      }
      this.freeMoveAnimation = new Update(1, -1, (function() {
        return freeMove();
      }), false);
      vx = vy = 0;
      i = 0;
      return freeMove = function() {
        i++;
        if (i % 10 === 0) {
          if (e.up && Math.abs(vy) < max) {
            vy += up;
          }
          if (e.right && Math.abs(vx) < max) {
            vx += right;
          }
          if (e.down && Math.abs(vy) < max) {
            vy += down;
          }
          if (e.left && Math.abs(vx) < max) {
            vx += left;
          }
        }
        if (i > 100) {
          i = 0;
        }
        if (_this.x < L) {
          _this.moveToX(L);
          vx *= -0.5;
        }
        if (_this.xx > R) {
          _this.moveToX(R - _this.w);
          vx *= -0.5;
        }
        if (_this.y < U) {
          _this.moveToY(U);
          vy *= -0.5;
        }
        if (_this.yy > D) {
          _this.moveToY(D - _this.h);
          vy *= -0.5;
        }
        _this.move(vx, vy);
        return typeof callback === "function" ? callback() : void 0;
      };
    };

    return Square;

  })();

  Node = (function() {

    function Node() {
      this.tile = this.texture = this.square = false;
      this;

    }

    Node.prototype.addTile = function(_plain, img) {
      if (!this.tile) {
        this.tile = new Tile(_plain, img);
      } else {
        this.tile.update(_plain, img);
      }
      return this.tile;
    };

    Node.prototype.addTexture = function(_plain, img) {
      if (this.texture === false) {
        this.texture = new Texture(_plain, img);
      } else {
        this.texture.update(_plain, img);
      }
      return this.texture;
    };

    Node.prototype.killTile = function() {
      var _ref;
      if ((_ref = this._drawTile) != null) {
        _ref.stop();
      }
      return delete this.tile;
    };

    Node.prototype.killAllTile = function() {
      var _ref, _ref1;
      if ((_ref = this._drawTile) != null) {
        _ref.stop();
      }
      if ((_ref1 = this.tile) != null) {
        _ref1.stopAnimate();
      }
      return delete this.tile;
    };

    Node.prototype.killTexture = function() {
      var _ref;
      this._drawTexture.stop();
      if ((_ref = this.texture) != null) {
        _ref.stopAnimate();
      }
      return delete this.texture;
    };

    Node.prototype.killSquare = function() {
      var _ref;
      if ((_ref = this.square) != null) {
        _ref.stopAnimate();
      }
      return delete this.texture;
    };

    Node.prototype.kill = function() {
      var _ref;
      if (this.tile) {
        this.killTile();
      }
      if (this.texture) {
        this.killTexture();
      }
      if (this.square) {
        this.killSquare();
      }
      return (_ref = this.followRun) != null ? _ref.stop() : void 0;
    };

    Node.prototype.killAll = function() {
      var _ref;
      if (this.tile) {
        this.killAllTile();
      }
      if (this.texture) {
        this.killTexture();
      }
      if (this.square) {
        this.killSquare();
      }
      return (_ref = this.followRun) != null ? _ref.stop() : void 0;
    };

    Node.prototype.animateTile = function(from, to, circular, frameRate, expiration, callback) {
      if (callback == null) {
        callback = false;
      }
      this.tile.animate(from, to, circular, frameRate, expiration, callback);
      return this;
    };

    Node.prototype.animateTexture = function(x, y, speed, expiration) {
      this.texture.animate(x, y, speed, expiration);
      return this;
    };

    Node.prototype.stopAnimateTile = function() {
      this.tile.stopAnimate();
      return this;
    };

    Node.prototype.stopAnimateTexture = function() {
      this.texture.stopAnimate();
      return this;
    };

    Node.prototype.addSquare = function(w, h, x, y) {
      this.square = new Square(w, h, x, y);
      return this;
    };

    Node.prototype.drawTile = function(tile, square, canvas) {
      var _this = this;
      if (tile == null) {
        tile = this.tile;
      }
      if (square == null) {
        square = this.square;
      }
      return this._drawTile = new Update(1, -1, (function() {
        return _this.drawImgSquare(tile, square, canvas);
      }));
    };

    Node.prototype.drawTexture = function(texture, square, canvas) {
      var _this = this;
      if (texture == null) {
        texture = this.texture;
      }
      if (square == null) {
        square = this.square;
      }
      return this._drawTexture = new Update(1, -1, (function() {
        return _this.drawImgColSquare(texture, square, canvas);
      }));
    };

    Node.prototype.drawImgColSquare = function(texture, square, canvas) {
      var col, i, _results;
      i = 0;
      col = texture.col;
      _results = [];
      while (col[i]) {
        canvas.printImg(texture.img, col[i].x + this.square.x, col[i].y + this.square.y, texture.imgW, texture.imgH, texture.startX, texture.startY, texture.imgW, texture.imgH);
        _results.push(i++);
      }
      return _results;
    };

    Node.prototype.drawImgSquare = function(tile, square, canvas) {
      return canvas.printImg(tile.img, square.x, square.y, tile.coords[tile.frameIndex].w, tile.coords[tile.frameIndex].h, tile.coords[tile.frameIndex].x, tile.coords[tile.frameIndex].y, tile.coords[tile.frameIndex].w, tile.coords[tile.frameIndex].h);
    };

    Node.prototype.slideTo = function(x, y, time, callback) {
      return this.square.slideTo(x, y, time, callback);
    };

    Node.prototype.move = function(x, y) {
      return this.square.move(x, y);
    };

    Node.prototype.shake = function(intensity, length, callback) {
      return this.square.shake(intensity, length, null, null, null, callback);
    };

    Node.prototype.jumpY = function(force, gravity, callback) {
      var _ref, _ref1;
      if ((_ref = this.square) != null ? _ref.jumpingY : void 0) {
        return false;
      }
      if ((_ref1 = this.square) != null) {
        _ref1.jumpY(force, gravity, callback);
      }
      return this;
    };

    Node.prototype.resize = function(w, h) {
      var _ref;
      if ((_ref = this.square) != null) {
        _ref.resize(w, h);
      }
      return this;
    };

    Node.prototype.moveCenter = function(x, y) {
      return this.square.moveCenter(x, y);
    };

    Node.prototype.move = function(x, y) {
      return this.square.move(x, y);
    };

    Node.prototype.follow = function(node, speed, xIndent, yIndent, callback) {
      var updatePosition,
        _this = this;
      if (node == null) {
        node = false;
      }
      if (speed == null) {
        speed = 1;
      }
      if (xIndent == null) {
        xIndent = 0;
      }
      if (yIndent == null) {
        yIndent = 0;
      }
      if (callback == null) {
        callback = false;
      }
      if (!node || !node.square) {
        return false;
      }
      if (typeof followRun !== "undefined" && followRun !== null) {
        followRun.stop();
      }
      this.followRun = new Update(speed, -1, (function() {
        return updatePosition();
      }), (function() {
        return typeof callback === "function" ? callback() : void 0;
      }));
      return updatePosition = function() {
        return _this.square.moveCenter(node.square.x + node.square.hw + xIndent, node.square.y + node.square.hh + yIndent);
      };
    };

    return Node;

  })();

  Collection = (function() {

    function Collection() {
      this.col = [];
      this;

    }

    Collection.prototype.add = function() {
      var obj, objects, _i, _len, _results;
      objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        obj = objects[_i];
        _results.push(this.col.push(obj));
      }
      return _results;
    };

    Collection.prototype.addCycle = function(time, expiration, callback) {
      var _this = this;
      if (time == null) {
        time = 60;
      }
      return new Update(time, expiration, (function() {
        return typeof callback === "function" ? callback() : void 0;
      }));
    };

    Collection.prototype.killCycle = function(name) {
      return name.stop();
    };

    Collection.prototype.squareCollision = function(square, callback) {
      var trash,
        _this = this;
      trash = new Collection();
      this.col.forEach(function(obj) {
        if (obj != null ? obj.square.sqCollision(square) : void 0) {
          trash.add(obj);
          return callback(obj);
        }
      });
      return this.extract(trash);
    };

    Collection.prototype.each = function(callback) {
      var _this = this;
      return this.col.forEach(function(obj) {
        return callback(obj);
      });
    };

    Collection.prototype.extract = function(c) {
      var elem, src, _i, _len, _ref, _results;
      _ref = c.col;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = this.col;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            src = _ref1[_j];
            if (src === elem) {
              _results1.push(this.trash(src));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Collection.prototype.emptyCol = function() {
      return this.col = [];
    };

    Collection.prototype.killAll = function() {
      var _this = this;
      this.each(function(elem) {
        return elem.kill();
      });
      return this.col = [];
    };

    Collection.prototype.trash = function(elem) {
      var i;
      i = 0;
      while (this.col[i]) {
        if (this.col[i] === elem) {
          this.col.splice(i, 1);
          return true;
        }
        i++;
      }
      return false;
    };

    return Collection;

  })();

  Reader = (function() {

    function Reader(data, canvas) {
      this.data = data;
      this.canvas = canvas;
      this.i = 0;
      this;

    }

    Reader.prototype.next = function() {
      this.i++;
      if (this.data[this.i]) {
        return this.read();
      }
    };

    Reader.prototype.print = function() {
      return this.canvas.printText(this.data[this.i], true);
    };

    Reader.prototype.sleep = function(time) {
      var sleeping,
        _this = this;
      sleeping = function() {
        if (_this.data[_this.i].print) {
          return _this.print();
        }
      };
      return this._sleep = new Update(1, time, (function() {
        return sleeping();
      }), (function() {
        return _this.next();
      }));
    };

    Reader.prototype.read = function() {
      if (this.data[this.i].exec) {
        this.data[this.i].exec();
      }
      return this.sleep(this.data[this.i].sleep);
    };

    return Reader;

  })();

  Zepto(function($) {
    var app, big_tree_tile, butterfly_tile, cat_veto_tile, child_tile, childhood, chute, chute_anar_tile, chute_bottle_tile, chute_coco_tile, chute_heart_tile, chute_hippie_tile, chute_me_tile, chute_sky_tile, chute_wall_tile, cosmos_tile, earth_tile, end, little_tree_tile, moon_tile, sky_tile, smoke_tile, spuf_tile, text, veto_tile,
      _this = this;
    child_tile = {
      x: 12,
      y: 1,
      w: 50,
      h: 110,
      startX: 0,
      startY: 0,
      partW: 12 * 50,
      partH: 110
    };
    cosmos_tile = {
      x: 12,
      y: 1,
      w: 50,
      h: 110,
      startX: 0,
      startY: 111,
      partW: 12 * 50,
      partH: 110
    };
    veto_tile = {
      x: 6,
      y: 2,
      w: 71,
      h: 101,
      startX: 0,
      startY: 222,
      partW: 6 * 71,
      partH: 101
    };
    smoke_tile = {
      x: 6,
      y: 1,
      w: 50,
      h: 110,
      startX: 0,
      startY: 111,
      partW: 6 * 50,
      partH: 110
    };
    spuf_tile = {
      x: 3,
      y: 2,
      w: 120,
      h: 120,
      startX: 0,
      startY: 0,
      partW: 3 * 120,
      partH: 2 * 120
    };
    butterfly_tile = {
      x: 5,
      y: 1,
      w: 22,
      h: 27,
      startX: 0,
      startY: 5 * 111,
      partW: 5 * 22,
      partH: 27
    };
    earth_tile = {
      w: 800,
      h: 138,
      imgW: 400,
      imgH: 138,
      startX: 0,
      startY: 0
    };
    moon_tile = {
      w: 800,
      h: 138,
      imgW: 340,
      imgH: 138,
      startX: 0,
      startY: 0
    };
    sky_tile = {
      w: 800,
      h: 500,
      imgW: 375,
      imgH: 319,
      startX: 0,
      startY: 138
    };
    big_tree_tile = {
      w: 800,
      h: 326,
      imgW: 400,
      imgH: 326,
      startX: 500,
      startY: 0
    };
    little_tree_tile = {
      w: 800,
      h: 149,
      imgW: 400,
      imgH: 149,
      startX: 500,
      startY: 370
    };
    cat_veto_tile = {
      w: 800,
      h: 149,
      imgW: 399,
      imgH: 149,
      startX: 501,
      startY: 370
    };
    chute_sky_tile = {
      w: 800,
      h: 600,
      imgW: 598,
      imgH: 389,
      startX: 0,
      startY: 0
    };
    chute_wall_tile = {
      w: 78,
      h: 600,
      imgW: 78,
      imgH: 145,
      startX: 598,
      startY: 0
    };
    chute_me_tile = {
      x: 7,
      y: 1,
      w: 111,
      h: 132,
      startX: 0,
      startY: 389,
      partW: 7 * 111,
      partH: 133
    };
    chute_bottle_tile = {
      x: 1,
      y: 1,
      w: 24,
      h: 74,
      startX: 0,
      startY: 521,
      partW: 24,
      partH: 74
    };
    chute_heart_tile = {
      x: 1,
      y: 1,
      w: 63,
      h: 74,
      startX: 25,
      startY: 521,
      partW: 63,
      partH: 74
    };
    chute_hippie_tile = {
      x: 1,
      y: 1,
      w: 64,
      h: 64,
      startX: 89,
      startY: 521,
      partW: 64,
      partH: 64
    };
    chute_anar_tile = {
      x: 1,
      y: 1,
      w: 73,
      h: 74,
      startX: 152,
      startY: 521,
      partW: 73,
      partH: 74
    };
    chute_coco_tile = {
      x: 1,
      y: 1,
      w: 70,
      h: 74,
      startX: 224,
      startY: 521,
      partW: 70,
      partH: 74
    };
    app = new App();
    app.event = new Event();
    app.startCycle();
    app.canvas = new Canvas(app, "canvas", 800, 600);
    childhood = function() {
      return this;
    };
    childhood.start = function() {
      var _this = this;
      this.earth = new Node();
      this.earth.addSquare(0, 0, 0, 500);
      this.earth.addTexture(earth_tile, app.decor);
      this.earth.animateTexture(5, 0, 1, -1);
      this.sky = new Node();
      this.sky.addSquare(0, 0, 0, 0);
      this.sky.addTexture(sky_tile, app.decor);
      this.sky.animateTexture(2, 0, 1, -1);
      this.btree = new Node();
      this.btree.addSquare(0, 0, 0, 175);
      this.btree.addTexture(big_tree_tile, app.decor);
      this.btree.animateTexture(3, 0, 1, -1);
      this.ltree = new Node();
      this.ltree.addSquare(0, 0, 0, 353);
      this.ltree.addTexture(little_tree_tile, app.decor);
      this.ltree.animateTexture(4, 0, 1, -1);
      this.sky.drawTexture(null, null, app.canvas);
      this.btree.drawTexture(null, null, app.canvas);
      this.ltree.drawTexture(null, null, app.canvas);
      this.earth.drawTexture(null, null, app.canvas);
      this.col = new Collection();
      return this.col._spawn = this.col.addCycle(100, -1, function() {
        var node;
        node = new Node();
        node.addSquare(22, 27, 800, 250 + Math.floor(Math.random() * 250));
        node.addTile(butterfly_tile, app.img);
        node.animateTile(0, 1, false, 4, -1);
        node.drawTile(null, null, app.canvas);
        return _this.col.add(node);
      });
    };
    childhood.childArrive = function() {
      var _this = this;
      this.child = new Node();
      this.child.addSquare(50, 50, -10, -110);
      this.child.addTile(child_tile, app.img);
      this.child.animateTile(0, 6, false, 4, -1);
      this.child.slideTo(100, 450, 20, function() {
        _this.child._jumpYGravity = 1;
        return _this.child._jump = $.subscribe("up", function() {
          return _this.child.animateTile(7, 11, true, 4, -1).jumpY(-20, _this.child._jumpYGravity, function() {
            return _this.child.animateTile(0, 6, false, 4, -1);
          });
        });
      });
      this.child.drawTile(null, null, app.canvas);
      return this.col._move = this.col.addCycle(1, -1, function() {
        _this.col.each(function(elem) {
          elem.move(-2, 0);
          if (elem.square.xx <= 0) {
            return elem.killTile();
          }
        });
        if (_this.child) {
          return _this.col.squareCollision(_this.child.square, function(elem) {
            return elem.killTile();
          });
        }
      });
    };
    childhood.cosmos = function() {
      var _this = this;
      app.canvas.clearEachFrame();
      this.btree.slideTo(800, 800, 30);
      this.ltree.slideTo(0, -500, 30);
      this.earth.slideTo(0, 800, 30);
      return this.sky.slideTo(0, -800, 35, function() {
        _this.sky.addTexture(sky_tile, app.decorSpace);
        _this.btree.addTexture(big_tree_tile, app.decorSpace);
        _this.ltree.addTexture(little_tree_tile, app.decorSpace);
        _this.ltree.animateTexture(4, 0, 1, -1);
        _this.sky.animateTexture(2, 0, 1, -1);
        _this.btree.animateTexture(3, 0, 1, -1);
        _this.earth.addTexture(moon_tile, app.decorSpace);
        _this.earth.animateTexture(5, 0, 1, -1);
        return _this.sky.slideTo(0, 0, 40, function() {
          return _this.earth.slideTo(0, 500, 40, function() {
            return _this.btree.slideTo(0, 175, 40, function() {
              return _this.ltree.slideTo(0, 353, 40, function() {
                _this.spuf = new Node();
                _this.spuf.addSquare(120, 120, 120, 120);
                _this.spuf.addTile(spuf_tile, app.spuf);
                _this.spuf.drawTile(null, null, app.canvas);
                _this.spuf.follow(_this.child, 2, 0, 20);
                _this.spuf.animateTile(0, 5, true, 2, 6, (function() {
                  return _this.spuf.kill();
                }));
                _this.child.addTile(cosmos_tile, app.img);
                _this.child._jumpYGravity = 0.5;
                _this.col.killCycle(_this.col._move);
                _this.col.killCycle(_this.col._spawn);
                return _this.col.killAll();
              });
            });
          });
        });
      });
    };
    childhood.veto = function() {
      var _this = this;
      this.btree.slideTo(800, 800, 30);
      this.ltree.slideTo(0, -500, 30);
      this.earth.slideTo(0, 800, 30);
      return this.sky.slideTo(0, -800, 35, function() {
        _this.sky.addTexture(sky_tile, app.decorVeto);
        _this.btree.addTexture(big_tree_tile, app.decorVeto);
        _this.ltree.addTexture(cat_veto_tile, app.decorVeto);
        _this.ltree.animateTexture(4, 0, 1, -1);
        _this.sky.animateTexture(2, 0, 1, -1);
        _this.btree.animateTexture(3, 0, 1, -1);
        _this.earth.addTexture(earth_tile, app.decorVeto);
        _this.earth.animateTexture(5, 0, 1, -1);
        return _this.sky.slideTo(0, 0, 40, function() {
          return _this.earth.slideTo(0, 500, 40, function() {
            return _this.btree.slideTo(0, 175, 40, function() {
              return _this.ltree.slideTo(0, 50, 40, function() {
                _this.spuf = new Node();
                _this.spuf.addSquare(120, 120, 120, 120);
                _this.spuf.addTile(spuf_tile, app.spuf);
                _this.spuf.drawTile(null, null, app.canvas);
                _this.spuf.follow(_this.child, 2, 0, 20);
                _this.spuf.animateTile(0, 5, true, 2, 6, function() {
                  return _this.spuf.kill();
                });
                _this.child.addTile(veto_tile, app.img);
                _this.child._jumpYGravity = 1;
                return app.canvas.stopClearEachFrame();
              });
            });
          });
        });
      });
    };
    childhood.childBack = function() {
      var _this = this;
      this.spuf = new Node();
      this.spuf.addSquare(120, 120, 120, 120);
      this.spuf.addTile(spuf_tile, app.spuf);
      this.spuf.drawTile(null, null, app.canvas);
      this.spuf.follow(this.child, 2, 0, 20);
      this.spuf.animateTile(0, 5, true, 2, 6, function() {
        return _this.spuf.kill();
      });
      return this.child.addTile(child_tile, app.img);
    };
    childhood.earthquake = function() {
      var _this = this;
      this.sky.stopAnimateTexture();
      this.btree.stopAnimateTexture();
      this.ltree.stopAnimateTexture();
      this.earth.stopAnimateTexture();
      $.unsubscribe(this.child._jump);
      this.sky.shake(4, 30);
      this.earth.shake(5, 30);
      this.ltree.shake(10, 30);
      this.btree.shake(10, 30);
      return this.child.slideTo(400, 450, 50, function() {
        _this.child.addTile(child_tile, app.img);
        _this.child.animateTile(4, 4, false, 4, 1);
        _this.child.stopAnimateTile();
        return _this.child.shake(5, 30);
      });
    };
    childhood.stop = function() {
      this.sky.killAll();
      this.btree.killAll();
      this.ltree.killAll();
      this.earth.killAll();
      return this.child.killAll();
    };
    chute = function() {
      return this;
    };
    chute.start = function() {
      var _this = this;
      this.sky = new Node();
      this.sky.addSquare(0, 0, 0, 0);
      this.sky.addTexture(chute_sky_tile, app.decorChute);
      this.sky.animateTexture(0, 9, 1, -1);
      this.sky.drawTexture(null, null, app.canvas);
      this.leftWall = new Node();
      this.leftWall.addSquare(0, 0, 0, 0);
      this.leftWall.addTexture(chute_wall_tile, app.decorChute);
      this.leftWall.animateTexture(0, 12, 1, -1);
      this.leftWall.drawTexture(null, null, app.canvas);
      this.rightWall = new Node();
      this.rightWall.addSquare(0, 0, 800 - 78, 0);
      this.rightWall.addTexture(chute_wall_tile, app.decorChute);
      this.rightWall.animateTexture(0, 12, 1, -1);
      this.rightWall.drawTexture(null, null, app.canvas);
      this.me = new Node();
      this.me.addSquare(111, 132, 300, -140);
      this.me.addTile(chute_me_tile, app.decorChute);
      this.me.animateTile(0, 5, true, 4, -1);
      this.me.slideTo(300, 300, 40, function() {
        return _this.me.square.startFreeMove(app.event, -2, 2, 2, -2, 0, 800 - 78, 600, 78);
      });
      return this.me.drawTile(null, null, app.canvas);
    };
    chute.love = function() {
      var _this = this;
      this.col = new Collection();
      this.col._addNode = function() {
        var node;
        node = new Node();
        node.addSquare(67, 74, 78 + Math.floor(Math.random() * 600), 650);
        node.addTile(chute_heart_tile, app.decorChute);
        node.drawTile(null, null, app.canvas);
        return node;
      };
      this.col._spawn = this.col.addCycle(30, -1, function() {
        var node;
        node = _this.col._addNode();
        return _this.col.add(node);
      });
      return this.col._move = this.col.addCycle(1, -1, function() {
        _this.col.each(function(elem) {
          elem.move(0, -3);
          if (elem.square.yy <= 0) {
            return elem.killTile();
          }
        });
        if (_this.me) {
          return _this.col.squareCollision(_this.me.square, function(elem) {
            return elem.killTile();
          });
        }
      });
    };
    chute.beer = function() {
      return this.col._addNode = function() {
        var node;
        node = new Node();
        node.addSquare(24, 74, 78 + Math.floor(Math.random() * 600), 650);
        node.addTile(chute_bottle_tile, app.decorChute);
        node.drawTile(null, null, app.canvas);
        return node;
      };
    };
    chute.hippie = function() {
      return this.col._addNode = function() {
        var node;
        node = new Node();
        node.addSquare(64, 64, 78 + Math.floor(Math.random() * 600), 650);
        node.addTile(chute_hippie_tile, app.decorChute);
        node.drawTile(null, null, app.canvas);
        return node;
      };
    };
    chute.anar = function() {
      return this.col._addNode = function() {
        var node;
        node = new Node();
        node.addSquare(73, 74, 78 + Math.floor(Math.random() * 600), 650);
        node.addTile(chute_anar_tile, app.decorChute);
        node.drawTile(null, null, app.canvas);
        return node;
      };
    };
    chute.coco = function() {
      return this.col._addNode = function() {
        var node;
        node = new Node();
        node.addSquare(73, 74, 78 + Math.floor(Math.random() * 600), 650);
        node.addTile(chute_coco_tile, app.decorChute);
        node.drawTile(null, null, app.canvas);
        return node;
      };
    };
    chute.stopCol = function() {
      this.col.killCycle(this.col._move);
      this.col.killCycle(this.col._spawn);
      return this.col.killAll();
    };
    chute.end = function() {
      this.sky.killAll();
      this.leftWall.killAll();
      this.rightWall.killAll();
      return this.me.killAll();
    };
    end = function() {
      app.canvas.stopClearEachFrame();
      chute.end();
      return app.stopCycle();
    };
    text = [
      {
        exec: function() {
          return childhood.start();
        },
        print: true,
        sleep: 250,
        tmpSleep: 25,
        txt: "CV César LEBLIC\n2012",
        x: 400,
        y: 300,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "60"
      }, {
        exec: function() {
          return childhood.childArrive();
        },
        print: false,
        sleep: 100,
        tmpSleep: 10
      }, {
        exec: false,
        print: true,
        sleep: 200,
        tmpSleep: 20,
        txt: "Mon enfance fût tranquille",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: false,
        print: true,
        sleep: 200,
        tmpSleep: 20,
        txt: "comme tout les enfants,\n je revais à de bien beaux métiers.",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: function() {
          return childhood.cosmos();
        },
        print: true,
        sleep: 400,
        tmpSleep: 40,
        txt: "J'ai voulu être cosmonaute",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: false,
        print: true,
        sleep: 150,
        tmpSleep: 15,
        txt: "ainsi que...",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: function() {
          return childhood.veto();
        },
        print: true,
        sleep: 400,
        tmpSleep: 40,
        txt: "vétérinaire",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: function() {
          return childhood.childBack();
        },
        print: false,
        sleep: 150,
        tmpSleep: 40,
        txt: "",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: false,
        print: true,
        sleep: 400,
        tmpSleep: 40,
        txt: "puis\nalors que je ne m'y attendais pas\narriva...",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: function() {
          return childhood.earthquake();
        },
        print: true,
        sleep: 210,
        tmpSleep: 400,
        txt: "L'ADOLESCENCE",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "70"
      }, {
        exec: function() {
          childhood.stop();
          return chute.start();
        },
        print: true,
        sleep: 120,
        tmpSleep: 400,
        txt: "L'ADOLESCENCE",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "70"
      }, {
        exec: false,
        print: true,
        sleep: 180,
        tmpSleep: 400,
        txt: "Je fais ma scolarité au collège Condorcet\npuis au lycée Racine",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: false,
        print: true,
        sleep: 180,
        tmpSleep: 400,
        txt: "Je participe à la création de Prométhée:\nqui reçoit le prix\ndu meilleur journal lycéen\nen 2005",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: false,
        print: true,
        sleep: 160,
        tmpSleep: 400,
        txt: "A part ça\nrien de très interessant à raconter...",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: function() {
          return chute.love();
        },
        print: true,
        sleep: 300,
        tmpSleep: 400,
        txt: "J'y ai découvert l'amour ...",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: function() {
          return chute.beer();
        },
        print: true,
        sleep: 300,
        tmpSleep: 400,
        txt: "la bière ...",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: false,
        print: true,
        sleep: 180,
        tmpSleep: 400,
        txt: "J'ai été pas mal de chose...",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: function() {
          return chute.hippie();
        },
        print: true,
        sleep: 220,
        tmpSleep: 400,
        txt: "un jour hippie...",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: function() {
          return chute.anar();
        },
        print: true,
        sleep: 180,
        tmpSleep: 400,
        txt: "un autre anarchiste...",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: function() {
          return chute.coco();
        },
        print: true,
        sleep: 180,
        tmpSleep: 400,
        txt: "un autre communiste...",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: function() {
          return chute.stopCol();
        },
        print: true,
        sleep: 80,
        tmpSleep: 400,
        txt: "BREF",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "70"
      }, {
        exec: false,
        print: true,
        sleep: 180,
        tmpSleep: 400,
        txt: "C'était l'adolescence",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: false,
        print: true,
        sleep: 110,
        tmpSleep: 400,
        txt: "Puis arriva...",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: false,
        print: true,
        sleep: 110,
        tmpSleep: 400,
        txt: "FIN !!!\n:D",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "70"
      }, {
        exec: false,
        print: true,
        sleep: 330,
        tmpSleep: 400,
        txt: "Je m'arrête là pour le moment,\ncar mine de rien\n ca prend du temps de dessiner\nces petites sprites\naussi moches soient-elles héhé",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: false,
        print: true,
        sleep: 110,
        tmpSleep: 400,
        txt: "Suite prochainement",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }, {
        exec: function() {
          return end();
        },
        print: false,
        sleep: 110,
        tmpSleep: 400,
        txt: "",
        x: 400,
        y: 80,
        bgColor: "#fff",
        txtColor: "#000",
        fontFamily: "Changa One",
        fontSize: "40"
      }
    ];
    return app.img = new Img(app, "img/child.png", function() {
      return app.decor = new Img(app, "img/decor-child.png", function() {
        return app.spuf = new Img(app, "img/spuf.png", function() {
          return app.decorSpace = new Img(app, "img/decor-space.png", function() {
            return app.decorVeto = new Img(app, "img/decor-veto.png", function() {
              return app.decorChute = new Img(app, "img/decor-chute.png", function() {
                var reader;
                reader = new Reader(text, app.canvas);
                return reader.read();
              });
            });
          });
        });
      });
    });
  });

}).call(this);
